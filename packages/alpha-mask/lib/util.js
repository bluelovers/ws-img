"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//export function rgbToAlpha2(R: number, G: number, B: number, A: number = 255)
//{
//	return OneColor([R, G, B, A]).lightness() * 255
//}
function rgbToAlpha(R, G, B, A = 255) {
    return Math.round(R * 0.30 + G * 0.59 + B * 0.11);
}
exports.rgbToAlpha = rgbToAlpha;
function getPointIndex(img, x, y) {
    return (img.width * y + x) << 2;
}
exports.getPointIndex = getPointIndex;
function getPointColor(img, x, y) {
    const idx = getPointIndex(img, x, y);
    return [img.data[idx], img.data[idx + 1], img.data[idx + 2], img.data[idx + 3]];
}
exports.getPointColor = getPointColor;
function getPoint(img, x, y) {
    const idx = getPointIndex(img, x, y);
    return {
        idx,
        data: [img.data[idx], img.data[idx + 1], img.data[idx + 2], img.data[idx + 3]],
    };
}
exports.getPoint = getPoint;
function getPointLightness(img, x, y) {
    return rgbToAlpha(...getPointColor(img, x, y));
}
exports.getPointLightness = getPointLightness;
function _mergeMaskSync(img, mask) {
    const { height, width } = img;
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            const { idx, data } = getPoint(mask, x, y);
            img.data[idx + 3] = rgbToAlpha(...data);
        }
    }
    return img;
}
exports._mergeMaskSync = _mergeMaskSync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSwrRUFBK0U7QUFDL0UsR0FBRztBQUNILGtEQUFrRDtBQUNsRCxHQUFHO0FBRUgsU0FBZ0IsVUFBVSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLElBQVksR0FBRztJQUUxRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNsRCxDQUFDO0FBSEQsZ0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQUMsR0FBUSxFQUFFLENBQVMsRUFBRSxDQUFTO0lBRTNELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUhELHNDQUdDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEdBQVEsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUUzRCxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVyQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBVSxDQUFBO0FBQ3pGLENBQUM7QUFMRCxzQ0FLQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxHQUFRLEVBQUUsQ0FBUyxFQUFFLENBQVM7SUFFdEQsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFckMsT0FBTztRQUNOLEdBQUc7UUFDSCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFVO0tBQ3ZGLENBQUE7QUFDRixDQUFDO0FBUkQsNEJBUUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxHQUFRLEVBQUUsQ0FBUyxFQUFFLENBQVM7SUFFL0QsT0FBTyxVQUFVLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9DLENBQUM7QUFIRCw4Q0FHQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxHQUFRLEVBQUUsSUFBUztJQUVqRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUU5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUMvQjtRQUNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQzlCO1lBQ0MsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUN4QztLQUNEO0lBRUQsT0FBTyxHQUFHLENBQUE7QUFDWCxDQUFDO0FBZEQsd0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbi8vaW1wb3J0IE9uZUNvbG9yIGZyb20gJ29uZWNvbG9yJztcbmltcG9ydCB7IElSR0JBIH0gZnJvbSAnLi9jb3JlJztcblxuLy9leHBvcnQgZnVuY3Rpb24gcmdiVG9BbHBoYTIoUjogbnVtYmVyLCBHOiBudW1iZXIsIEI6IG51bWJlciwgQTogbnVtYmVyID0gMjU1KVxuLy97XG4vL1x0cmV0dXJuIE9uZUNvbG9yKFtSLCBHLCBCLCBBXSkubGlnaHRuZXNzKCkgKiAyNTVcbi8vfVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9BbHBoYShSOiBudW1iZXIsIEc6IG51bWJlciwgQjogbnVtYmVyLCBBOiBudW1iZXIgPSAyNTUpXG57XG5cdHJldHVybiBNYXRoLnJvdW5kKFIgKiAwLjMwICsgRyAqIDAuNTkgKyBCICogMC4xMSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50SW5kZXgoaW1nOiBQTkcsIHg6IG51bWJlciwgeTogbnVtYmVyKVxue1xuXHRyZXR1cm4gKGltZy53aWR0aCAqIHkgKyB4KSA8PCAyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9pbnRDb2xvcihpbWc6IFBORywgeDogbnVtYmVyLCB5OiBudW1iZXIpXG57XG5cdGNvbnN0IGlkeCA9IGdldFBvaW50SW5kZXgoaW1nLCB4LCB5KTtcblxuXHRyZXR1cm4gW2ltZy5kYXRhW2lkeF0sIGltZy5kYXRhW2lkeCArIDFdLCBpbWcuZGF0YVtpZHggKyAyXSwgaW1nLmRhdGFbaWR4ICsgM11dIGFzIElSR0JBXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludChpbWc6IFBORywgeDogbnVtYmVyLCB5OiBudW1iZXIpXG57XG5cdGNvbnN0IGlkeCA9IGdldFBvaW50SW5kZXgoaW1nLCB4LCB5KTtcblxuXHRyZXR1cm4ge1xuXHRcdGlkeCxcblx0XHRkYXRhOiBbaW1nLmRhdGFbaWR4XSwgaW1nLmRhdGFbaWR4ICsgMV0sIGltZy5kYXRhW2lkeCArIDJdLCBpbWcuZGF0YVtpZHggKyAzXV0gYXMgSVJHQkEsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50TGlnaHRuZXNzKGltZzogUE5HLCB4OiBudW1iZXIsIHk6IG51bWJlcilcbntcblx0cmV0dXJuIHJnYlRvQWxwaGEoLi4uZ2V0UG9pbnRDb2xvcihpbWcsIHgsIHkpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX21lcmdlTWFza1N5bmMoaW1nOiBQTkcsIG1hc2s6IFBORylcbntcblx0Y29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBpbWc7XG5cblx0Zm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKylcblx0e1xuXHRcdGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKylcblx0XHR7XG5cdFx0XHRjb25zdCB7IGlkeCwgZGF0YSB9ID0gZ2V0UG9pbnQobWFzaywgeCwgeSk7XG5cdFx0XHRpbWcuZGF0YVtpZHggKyAzXSA9IHJnYlRvQWxwaGEoLi4uZGF0YSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGltZ1xufVxuIl19